#!/usr/bin/python3

import argparse
import re
import subprocess


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "names",
        metavar="NAME",
        type=lambda n: n.lower(),
        nargs="+",
        help="Name or part of name.",
    )
    g = parser.add_argument_group("prefix").add_mutually_exclusive_group()
    g.add_argument(
        "-r",
        "--reported-by",
        help="Prefix with Reported-by instead of Acked-by.",
        dest="prefix",
        const="Reported-by",
        action="store_const",
    )
    g.add_argument(
        "-R",
        "--reviewed-by",
        help="Prefix with Reviewed-by instead of Acked-by.",
        dest="prefix",
        const="Reviewed-by",
        action="store_const",
    )
    g.add_argument(
        "-s",
        "--signed-off-by",
        help="Prefix with Signed-off-by instead of Acked-by.",
        dest="prefix",
        const="Signed-off-by",
        action="store_const",
    )
    g.add_argument(
        "-t",
        "--tested-by",
        help="Prefix with Tested-by instead of Acked-by.",
        dest="prefix",
        const="Tested-by",
        action="store_const",
    )
    g.add_argument(
        "-c",
        "--cc",
        help="Prefix with Cc instead of Acked-by.",
        dest="prefix",
        const="Cc",
        action="store_const",
    )
    g.add_argument(
        "-S",
        "--suggested-by",
        help="Prefix with Suggested-by instead of Acked-by.",
        dest="prefix",
        const="Suggested-by",
        action="store_const",
    )
    g.add_argument(
        "-n",
        "--name-only",
        help="Prefix nothing.",
        dest="prefix",
        const=None,
        action="store_const",
    )
    parser.set_defaults(prefix="Acked-by")
    args = parser.parse_args()

    out = subprocess.check_output(
        [
            "git",
            "shortlog",
            "-se",
            "-w0",
            "--group=author",
            "--group=committer",
            "--group=trailer:acked-by",
            "--group=trailer:reviewed-by",
            "HEAD",
        ]
    )

    results = {}

    for line in out.decode("utf-8", errors="surrogateescape").splitlines():
        match = re.match(r"\s*\d+\s+(?P<name>.+)\s+<(?P<email>.+@.+)>", line)
        if match:
            name = match.group("name")
            name = re.sub(r"[A-Z][A-Z]+", lambda m: m.group(0).title(), name)
            name = re.sub(r"\b[a-z][a-z]+\b", lambda m: m.group(0).title(), name)
            email = match.group("email").lower()
            key = f"{name.lower()}***{email.lower()}"
            for n in args.names:
                if n in key:
                    results[key] = (name, email)

    for name, email in sorted(results.values()):
        if args.prefix:
            print(f"{args.prefix}: {name} <{email}>")
        else:
            print(f"{name} <{email}>")


if __name__ == "__main__":
    main()
